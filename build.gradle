import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name 'Sponge maven repo'
            url 'http://repo.spongepowered.org/maven'
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT'
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
        classpath 'org.spongepowered:spongegradle:0.5.1'
    }
}

apply plugin: 'org.spongepowered.plugin'
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'com.github.johnrengelman.shadow'

group 'net.foxdenstudio.sponge.foxcore'
version '0.8.0'

if (System.env.TRAVIS) {
    String tempVersion = ''
    if (System.env.TRAVIS_TAG) {
        tempVersion = System.env.TRAVIS_TAG;
        if(tempVersion.startsWith("v")){
            tempVersion = tempVersion.substring(1)
        }
        tempVersion += "-$System.env.TRAVIS_BUILD_NUMBER"
    } else {
        tempVersion = version + "-$System.env.TRAVIS_BUILD_NUMBER-SNAPSHOT"
    }
    version tempVersion
}

apply from: project.file("sponge.gradle")

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

sponge.plugin {
    id = 'foxcore'
}

minecraft {
    version = "1.8.9-11.15.1.1808"
    runDir = "run"
    mappings = "snapshot_20160109"
    makeObfSourceJar = false
}

repositories {
    mavenCentral()
    maven {
        name 'Sponge maven repo'
        url 'http://repo.spongepowered.org/maven'
    }
}

dependencies {
    compile "org.spongepowered:spongeapi:$spongeVersion"
    compile 'org.mapdb:mapdb:3.0.0-M6'
//	compile 'org.mapdb:elsa:3.0.0-M2'
    testCompile group: 'junit', name: 'junit', version: '4.11'
}

/* TODO: This is broken, but was never replacing anything anyway
processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}*/

shadowJar {
    classifier = ''
    dependsOn reobfJar
    dependencies {
        include dependency('org.mapdb:mapdb')
        include dependency('org.mapdb:elsa')
        include dependency('org.eclipse.collections:eclipse-collections')
        include dependency('org.eclipse.collections:eclipse-collections-api')
        include dependency('org.eclipse.collections:eclipse-collections-forkjoin')
        include dependency('org.jetbrains.kotlin:kotlin-stdlib')
        include dependency('org.jetbrains.kotlin:kotlin-runtime')
        include dependency('net.jpountz.lz4:lz4')
        include dependency('com.google.guava:guava:19.0')
    }
    relocate 'org.mapdb', 'net.foxdenstudio.shadow.mapdb'
}

task serverJar(type: ShadowJar) {
    classifier = 'server'
    dependencies {
        include dependency('org.mapdb:mapdb')
        include dependency('org.mapdb:elsa')
        include dependency('org.eclipse.collections:eclipse-collections')
        include dependency('org.eclipse.collections:eclipse-collections-api')
        include dependency('org.eclipse.collections:eclipse-collections-forkjoin')
        include dependency('org.jetbrains.kotlin:kotlin-stdlib')
        include dependency('org.jetbrains.kotlin:kotlin-runtime')
        include dependency('net.jpountz.lz4:lz4')
        include dependency('com.google.guava:guava:19.0')
    }
    from(sourceSets.main.output) {
        exclude "net/foxdenstudio/sponge/foxcore/mod"
    }
    configurations = [project.configurations.runtime]
    relocate 'org.mapdb', 'net.foxdenstudio.shadow.mapdb'
    exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')
}

task liteJar(type: Jar) {
    classifier = 'lite'
    from sourceSets.main.output
}

task serverLiteJar(type: Jar) {
    classifier = 'server-lite'
    from(sourceSets.main.output) {
        exclude "net/foxdenstudio/sponge/foxcore/mod"
    }
}

task libJar(type: ShadowJar){
    classifier = 'lib'
    dependencies{
        include dependency('org.mapdb:mapdb')
        include dependency('org.mapdb:elsa')
        include dependency('org.eclipse.collections:eclipse-collections')
        include dependency('org.eclipse.collections:eclipse-collections-api')
        include dependency('org.eclipse.collections:eclipse-collections-forkjoin')
        include dependency('org.jetbrains.kotlin:kotlin-stdlib')
        include dependency('org.jetbrains.kotlin:kotlin-runtime')
        include dependency('net.jpountz.lz4:lz4')
        include dependency('com.google.guava:guava:19.0')
    }
    configurations = [project.configurations.runtime]
    relocate 'org.mapdb', 'net.foxdenstudio.shadow.mapdb'
    exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')
}

task serverLibJar(type: ShadowJar){
    classifier = 'server-lib'
    dependencies{
        include dependency('org.mapdb:mapdb')
        include dependency('org.mapdb:elsa')
        include dependency('org.eclipse.collections:eclipse-collections')
        include dependency('org.eclipse.collections:eclipse-collections-api')
        include dependency('org.eclipse.collections:eclipse-collections-forkjoin')
        include dependency('org.jetbrains.kotlin:kotlin-stdlib')
        include dependency('org.jetbrains.kotlin:kotlin-runtime')
        include dependency('net.jpountz.lz4:lz4')
        include dependency('com.google.guava:guava:19.0')
    }
    configurations = [project.configurations.runtime]
    relocate 'org.mapdb', 'net.foxdenstudio.shadow.mapdb'
    exclude('META-INF/INDEX.LIST', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA')
}

reobf {
    shadowJar { mappingType = 'SEARGE' }
}

artifacts {
    archives shadowJar
    archives serverJar
    archives liteJar
    archives serverLiteJar
    archives libJar
    archives serverLibJar
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.11'
}
